require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/recipe_foods', type: :request do
  before :each do
    @user = User.create(name: 'Promise')
    @food = Food.create(name: 'carrots',
      measurement_unit: 'grammes',
      price: 30, quantity: 5, user_id: @user.id
    )

    @recipe_item1 = RecipeItem.create(name: 'how to make carrot stew',
      preparation_time: 1, cooking_time: 3,
      description: 'This is how to make a carrot stew',
      public: true,
      user_id: @user.id
    )
    @recipe_item2 = RecipeItem.create(name: 'how to make carrot stew',
      preparation_time: 1, cooking_time: 3,
      description: 'This is how to make a carrot stew',
      public: true,
      user_id: @user.id
    )
    @recipe_item3 = RecipeItem.create(name: 'how to make carrot stew',
      preparation_time: 1, cooking_time: 3,
      description: 'This is how to make a carrot stew',
      public: true,
      user_id: @user.id
    )

    @recipe_food1 = RecipeFood.create(quantity: 5, 
      recipe_item_id: @recipe_item1.id, 
      food_id: @food.id
    )
    @recipe_food2 = RecipeFood.create(quantity: 6, 
      recipe_item_id: @recipe_item2.id, 
      food_id: @food.id
    )
    @recipe_food3 = RecipeFood.create(quantity: 7, 
      recipe_item_id: @recipe_item3.id, 
      food_id: @food.id
    )
  end

  it 'displays the recipe foods page' do
    get "/recipe_foods"
    expect(@recipe_food1.quantity).to eq(5)
    expect(@recipe_food2.quantity).to eq(6)
    expect(@recipe_food3.quantity).to eq(7)
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      RecipeFood.create(quantity: 7, 
      recipe_item_id: @recipe_item3.id, 
      food_id: @food.id)
      get "/recipe_foods"
      expect(response).to have_http_status(:found)
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      recipe_food = RecipeFood.create(quantity: 7,
      recipe_item_id: @recipe_item3.id, 
      food_id: @food.id)
      get "/recipe_foods/#{recipe_food.id}"
      expect(response).to have_http_status(:found)
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get "/recipe_foods/new"
      expect(response).to have_http_status(:found)
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      recipe_food = RecipeFood.create(quantity: 7,
      recipe_item_id: @recipe_item3.id, 
      food_id: @food.id)
      get "/recipe_foods/#{recipe_food.id}/edit"
      expect(response).to have_http_status(:found)
    end
  end
end
